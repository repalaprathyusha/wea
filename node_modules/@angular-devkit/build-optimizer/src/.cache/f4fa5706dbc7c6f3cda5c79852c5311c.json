{"remainingRequest":"C:\\Users\\bonala\\Desktop\\WeatherAppApi\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\bonala\\Desktop\\WeatherAppApi\\node_modules\\@angular\\flex-layout\\esm5\\extended.es5.js","dependencies":[{"path":"C:\\Users\\bonala\\Desktop\\WeatherAppApi\\node_modules\\@angular\\flex-layout\\esm5\\extended.es5.js","mtime":1552283196940},{"path":"C:\\Users\\bonala\\Desktop\\WeatherAppApi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552283083157},{"path":"C:\\Users\\bonala\\Desktop\\WeatherAppApi\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1552283077916}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START tslib,_angular_core,_angular_common,_angular_flex_layout_core,_angular_cdk_coercion,rxjs_operators,_angular_platform_browser PURE_IMPORTS_END */\nimport { __extends, __assign } from 'tslib';\nimport { Directive, ElementRef, Inject, PLATFORM_ID, Injectable, Input, NgModule, IterableDiffers, KeyValueDiffers, Optional, Renderer2, Self, SecurityContext, defineInjectable } from '@angular/core';\nimport { isPlatformServer, NgClass, NgStyle } from '@angular/common';\nimport { MediaMarshaller, BaseDirective2, SERVER_TOKEN, StyleBuilder, StyleUtils, LAYOUT_CONFIG, CoreModule } from '@angular/flex-layout/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { takeUntil } from 'rxjs/operators';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar ImgSrcStyleBuilder = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(ImgSrcStyleBuilder, _super);\n    function ImgSrcStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    ImgSrcStyleBuilder.prototype.buildStyles = /**\n     * @param {?} url\n     * @return {?}\n     */\n        function (url) {\n            return { 'content': url ? \"url(\" + url + \")\" : '' };\n        };\n    /** @nocollapse */ ImgSrcStyleBuilder.ngInjectableDef = defineInjectable({ factory: function ImgSrcStyleBuilder_Factory() { return new ImgSrcStyleBuilder(); }, token: ImgSrcStyleBuilder, providedIn: \"root\" });\n    return ImgSrcStyleBuilder;\n}(StyleBuilder));\nvar ImgSrcDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(ImgSrcDirective, _super);\n    function ImgSrcDirective(elementRef, styleBuilder, styler, marshal, platformId, serverModuleLoaded) {\n        var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;\n        _this.elementRef = elementRef;\n        _this.styleBuilder = styleBuilder;\n        _this.styler = styler;\n        _this.marshal = marshal;\n        _this.platformId = platformId;\n        _this.serverModuleLoaded = serverModuleLoaded;\n        _this.DIRECTIVE_KEY = 'img-src';\n        _this.defaultSrc = '';\n        _this.styleCache = imgSrcCache;\n        _this.init();\n        _this.setValue('', _this.nativeElement.getAttribute('src') || '');\n        if (isPlatformServer(_this.platformId) && _this.serverModuleLoaded) {\n            _this.nativeElement.setAttribute('src', '');\n        }\n        return _this;\n    }\n    Object.defineProperty(ImgSrcDirective.prototype, \"src\", {\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */ function (val) {\n            this.defaultSrc = val;\n            this.setValue('', this.defaultSrc);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Use the [responsively] activated input value to update\n     * the host img src attribute or assign a default `img.src=''`\n     * if the src has not been defined.\n     *\n     * Do nothing to standard `<img src=\"\">` usages, only when responsive\n     * keys are present do we actually call `setAttribute()`\n     */\n    /**\n     * Use the [responsively] activated input value to update\n     * the host img src attribute or assign a default `img.src=''`\n     * if the src has not been defined.\n     *\n     * Do nothing to standard `<img src=\"\">` usages, only when responsive\n     * keys are present do we actually call `setAttribute()`\n     * @return {?}\n     */\n    ImgSrcDirective.prototype.updateWithValue = /**\n     * Use the [responsively] activated input value to update\n     * the host img src attribute or assign a default `img.src=''`\n     * if the src has not been defined.\n     *\n     * Do nothing to standard `<img src=\"\">` usages, only when responsive\n     * keys are present do we actually call `setAttribute()`\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var url = this.activatedValue || this.defaultSrc;\n            if (isPlatformServer(this.platformId) && this.serverModuleLoaded) {\n                this.addStyles(url);\n            }\n            else {\n                this.nativeElement.setAttribute('src', String(url));\n            }\n        };\n    return ImgSrcDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar imgSrcCache = /*@__PURE__*/ new Map();\n/** @type {?} */\nvar inputs = [\n    'src.xs', 'src.sm', 'src.md', 'src.lg', 'src.xl',\n    'src.lt-sm', 'src.lt-md', 'src.lt-lg', 'src.lt-xl',\n    'src.gt-xs', 'src.gt-sm', 'src.gt-md', 'src.gt-lg'\n];\n/** @type {?} */\nvar selector = \"\\n  img[src.xs],    img[src.sm],    img[src.md],    img[src.lg],   img[src.xl],\\n  img[src.lt-sm], img[src.lt-md], img[src.lt-lg], img[src.lt-xl],\\n  img[src.gt-xs], img[src.gt-sm], img[src.gt-md], img[src.gt-lg]\\n\";\n/**\n * This directive provides a responsive API for the HTML <img> 'src' attribute\n * and will update the img.src property upon each responsive activation.\n *\n * e.g.\n *      <img src=\"defaultScene.jpg\" src.xs=\"mobileScene.jpg\"></img>\n *\n * @see https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-src/\n */\nvar DefaultImgSrcDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(DefaultImgSrcDirective, _super);\n    function DefaultImgSrcDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs;\n        return _this;\n    }\n    return DefaultImgSrcDirective;\n}(ImgSrcDirective));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar ClassDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(ClassDirective, _super);\n    function ClassDirective(elementRef, styler, marshal, iterableDiffers, keyValueDiffers, renderer, ngClassInstance) {\n        var _this = _super.call(this, elementRef, /** @type {?} */ ((null)), styler, marshal) || this;\n        _this.elementRef = elementRef;\n        _this.styler = styler;\n        _this.marshal = marshal;\n        _this.iterableDiffers = iterableDiffers;\n        _this.keyValueDiffers = keyValueDiffers;\n        _this.renderer = renderer;\n        _this.ngClassInstance = ngClassInstance;\n        _this.DIRECTIVE_KEY = 'ngClass';\n        if (!_this.ngClassInstance) {\n            // Create an instance NgClass Directive instance only if `ngClass=\"\"` has NOT been defined on\n            // the same host element; since the responsive variations may be defined...\n            _this.ngClassInstance = new NgClass(_this.iterableDiffers, _this.keyValueDiffers, _this.elementRef, _this.renderer);\n        }\n        _this.init();\n        return _this;\n    }\n    Object.defineProperty(ClassDirective.prototype, \"klass\", {\n        /**\n         * Capture class assignments so we cache the default classes\n         * which are merged with activated styles and used as fallbacks.\n         */\n        set: /**\n         * Capture class assignments so we cache the default classes\n         * which are merged with activated styles and used as fallbacks.\n         * @param {?} val\n         * @return {?}\n         */ function (val) {\n            this.ngClassInstance.klass = val;\n            this.setValue(val, '');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ClassDirective.prototype.updateWithValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.ngClassInstance.ngClass = value;\n            this.ngClassInstance.ngDoCheck();\n        };\n    // ******************************************************************\n    // Lifecycle Hooks\n    // ******************************************************************\n    /**\n     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n     */\n    /**\n     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n     * @return {?}\n     */\n    ClassDirective.prototype.ngDoCheck = /**\n     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n     * @return {?}\n     */\n        function () {\n            this.ngClassInstance.ngDoCheck();\n        };\n    return ClassDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar inputs$1 = [\n    'ngClass', 'ngClass.xs', 'ngClass.sm', 'ngClass.md', 'ngClass.lg', 'ngClass.xl',\n    'ngClass.lt-sm', 'ngClass.lt-md', 'ngClass.lt-lg', 'ngClass.lt-xl',\n    'ngClass.gt-xs', 'ngClass.gt-sm', 'ngClass.gt-md', 'ngClass.gt-lg'\n];\n/** @type {?} */\nvar selector$1 = \"\\n  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],\\n  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],\\n  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\\n\";\n/**\n * Directive to add responsive support for ngClass.\n * This maintains the core functionality of 'ngClass' and adds responsive API\n * Note: this class is a no-op when rendered on the server\n */\nvar DefaultClassDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(DefaultClassDirective, _super);\n    function DefaultClassDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$1;\n        return _this;\n    }\n    return DefaultClassDirective;\n}(ClassDirective));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar ShowHideStyleBuilder = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(ShowHideStyleBuilder, _super);\n    function ShowHideStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} show\n     * @param {?} parent\n     * @return {?}\n     */\n    ShowHideStyleBuilder.prototype.buildStyles = /**\n     * @param {?} show\n     * @param {?} parent\n     * @return {?}\n     */\n        function (show, parent) {\n            /** @type {?} */\n            var shouldShow = show === 'true';\n            return { 'display': shouldShow ? parent.display : 'none' };\n        };\n    /** @nocollapse */ ShowHideStyleBuilder.ngInjectableDef = defineInjectable({ factory: function ShowHideStyleBuilder_Factory() { return new ShowHideStyleBuilder(); }, token: ShowHideStyleBuilder, providedIn: \"root\" });\n    return ShowHideStyleBuilder;\n}(StyleBuilder));\nvar ShowHideDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(ShowHideDirective, _super);\n    function ShowHideDirective(elementRef, styleBuilder, styler, marshal, layoutConfig, platformId, serverModuleLoaded) {\n        var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;\n        _this.elementRef = elementRef;\n        _this.styleBuilder = styleBuilder;\n        _this.styler = styler;\n        _this.marshal = marshal;\n        _this.layoutConfig = layoutConfig;\n        _this.platformId = platformId;\n        _this.serverModuleLoaded = serverModuleLoaded;\n        _this.DIRECTIVE_KEY = 'show-hide';\n        /**\n         * Original dom Elements CSS display style\n         */\n        _this.display = '';\n        _this.hasLayout = false;\n        _this.hasFlexChild = false;\n        return _this;\n    }\n    // *********************************************\n    // Lifecycle Methods\n    // *********************************************\n    /**\n     * @return {?}\n     */\n    ShowHideDirective.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.trackExtraTriggers();\n            /** @type {?} */\n            var children = Array.from(this.nativeElement.children);\n            for (var i = 0; i < children.length; i++) {\n                if (this.marshal.hasValue(/** @type {?} */ (children[i]), 'flex')) {\n                    this.hasFlexChild = true;\n                    break;\n                }\n            }\n            if (DISPLAY_MAP.has(this.nativeElement)) {\n                this.display = /** @type {?} */ ((DISPLAY_MAP.get(this.nativeElement)));\n            }\n            else {\n                this.display = this.getDisplayStyle();\n                DISPLAY_MAP.set(this.nativeElement, this.display);\n            }\n            this.init();\n            /** @type {?} */\n            var defaultValue = this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY, '');\n            if (defaultValue === undefined || defaultValue === '') {\n                this.setValue(true, '');\n            }\n            else {\n                this.triggerUpdate();\n            }\n        };\n    /**\n     * On changes to any @Input properties...\n     * Default to use the non-responsive Input value ('fxShow')\n     * Then conditionally override with the mq-activated Input's current value\n     */\n    /**\n     * On changes to any \\@Input properties...\n     * Default to use the non-responsive Input value ('fxShow')\n     * Then conditionally override with the mq-activated Input's current value\n     * @param {?} changes\n     * @return {?}\n     */\n    ShowHideDirective.prototype.ngOnChanges = /**\n     * On changes to any \\@Input properties...\n     * Default to use the non-responsive Input value ('fxShow')\n     * Then conditionally override with the mq-activated Input's current value\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            var _this = this;\n            Object.keys(changes).forEach(function (key) {\n                if (_this.inputs.indexOf(key) !== -1) {\n                    /** @type {?} */\n                    var inputKey = key.split('.');\n                    /** @type {?} */\n                    var bp = inputKey.slice(1).join('.');\n                    /** @type {?} */\n                    var inputValue = changes[key].currentValue;\n                    /** @type {?} */\n                    var shouldShow = inputValue !== '' ?\n                        inputValue !== 0 ? coerceBooleanProperty(inputValue) : false\n                        : true;\n                    if (inputKey[0] === 'fxHide') {\n                        shouldShow = !shouldShow;\n                    }\n                    _this.setValue(shouldShow, bp);\n                }\n            });\n        };\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     *  Watch for these extra triggers to update fxShow, fxHide stylings\n     */\n    /**\n     *  Watch for these extra triggers to update fxShow, fxHide stylings\n     * @return {?}\n     */\n    ShowHideDirective.prototype.trackExtraTriggers = /**\n     *  Watch for these extra triggers to update fxShow, fxHide stylings\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.hasLayout = this.marshal.hasValue(this.nativeElement, 'layout');\n            ['layout', 'layout-align'].forEach(function (key) {\n                _this.marshal\n                    .trackValue(_this.nativeElement, key)\n                    .pipe(takeUntil(_this.destroySubject))\n                    .subscribe(_this.triggerUpdate.bind(_this));\n            });\n        };\n    /**\n     * Override accessor to the current HTMLElement's `display` style\n     * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'\n     * unless it was already explicitly specified inline or in a CSS stylesheet.\n     */\n    /**\n     * Override accessor to the current HTMLElement's `display` style\n     * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'\n     * unless it was already explicitly specified inline or in a CSS stylesheet.\n     * @return {?}\n     */\n    ShowHideDirective.prototype.getDisplayStyle = /**\n     * Override accessor to the current HTMLElement's `display` style\n     * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'\n     * unless it was already explicitly specified inline or in a CSS stylesheet.\n     * @return {?}\n     */\n        function () {\n            return (this.hasLayout || (this.hasFlexChild && this.layoutConfig.addFlexToParent)) ?\n                'flex' : this.styler.lookupStyle(this.nativeElement, 'display', true);\n        };\n    /** Validate the visibility value and then update the host's inline display style */\n    /**\n     * Validate the visibility value and then update the host's inline display style\n     * @param {?=} value\n     * @return {?}\n     */\n    ShowHideDirective.prototype.updateWithValue = /**\n     * Validate the visibility value and then update the host's inline display style\n     * @param {?=} value\n     * @return {?}\n     */\n        function (value) {\n            if (value === void 0) {\n                value = true;\n            }\n            if (value === '') {\n                return;\n            }\n            this.addStyles(value ? 'true' : 'false', { display: this.display });\n            if (isPlatformServer(this.platformId) && this.serverModuleLoaded) {\n                this.nativeElement.style.setProperty('display', '');\n            }\n        };\n    return ShowHideDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar DISPLAY_MAP = /*@__PURE__*/ new WeakMap();\n/** @type {?} */\nvar inputs$2 = [\n    'fxShow', 'fxShow.print',\n    'fxShow.xs', 'fxShow.sm', 'fxShow.md', 'fxShow.lg', 'fxShow.xl',\n    'fxShow.lt-sm', 'fxShow.lt-md', 'fxShow.lt-lg', 'fxShow.lt-xl',\n    'fxShow.gt-xs', 'fxShow.gt-sm', 'fxShow.gt-md', 'fxShow.gt-lg',\n    'fxHide', 'fxHide.print',\n    'fxHide.xs', 'fxHide.sm', 'fxHide.md', 'fxHide.lg', 'fxHide.xl',\n    'fxHide.lt-sm', 'fxHide.lt-md', 'fxHide.lt-lg', 'fxHide.lt-xl',\n    'fxHide.gt-xs', 'fxHide.gt-sm', 'fxHide.gt-md', 'fxHide.gt-lg'\n];\n/** @type {?} */\nvar selector$2 = \"\\n  [fxShow], [fxShow.print],\\n  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],\\n  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],\\n  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],\\n  [fxHide], [fxHide.print],\\n  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],\\n  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],\\n  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]\\n\";\n/**\n * 'show' Layout API directive\n */\nvar DefaultShowHideDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(DefaultShowHideDirective, _super);\n    function DefaultShowHideDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$2;\n        return _this;\n    }\n    return DefaultShowHideDirective;\n}(ShowHideDirective));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * NgStyle allowed inputs\n */\nvar /**\n * NgStyle allowed inputs\n */ NgStyleKeyValue = /** @class */ /*@__PURE__*/ (function () {\n    function NgStyleKeyValue(key, value, noQuotes) {\n        if (noQuotes === void 0) {\n            noQuotes = true;\n        }\n        this.key = key;\n        this.value = value;\n        this.key = noQuotes ? key.replace(/['\"]/g, '').trim() : key.trim();\n        this.value = noQuotes ? value.replace(/['\"]/g, '').trim() : value.trim();\n        this.value = this.value.replace(/;/, '');\n    }\n    return NgStyleKeyValue;\n}());\n/**\n * @param {?} target\n * @return {?}\n */\nfunction getType(target) {\n    /** @type {?} */\n    var what = typeof target;\n    if (what === 'object') {\n        return (target.constructor === Array) ? 'array' :\n            (target.constructor === Set) ? 'set' : 'object';\n    }\n    return what;\n}\n/**\n * Split string of key:value pairs into Array of k-v pairs\n * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]\n * @param {?} source\n * @param {?=} delimiter\n * @return {?}\n */\nfunction buildRawList(source, delimiter) {\n    if (delimiter === void 0) {\n        delimiter = ';';\n    }\n    return String(source)\n        .trim()\n        .split(delimiter)\n        .map(function (val) { return val.trim(); })\n        .filter(function (val) { return val !== ''; });\n}\n/**\n * Convert array of key:value strings to a iterable map object\n * @param {?} styles\n * @param {?=} sanitize\n * @return {?}\n */\nfunction buildMapFromList(styles, sanitize) {\n    /** @type {?} */\n    var sanitizeValue = function (it) {\n        if (sanitize) {\n            it.value = sanitize(it.value);\n        }\n        return it;\n    };\n    return styles\n        .map(stringToKeyValue)\n        .filter(function (entry) { return !!entry; })\n        .map(sanitizeValue)\n        .reduce(keyValuesToMap, /** @type {?} */ ({}));\n}\n/**\n * Convert Set<string> or raw Object to an iterable NgStyleMap\n * @param {?} source\n * @param {?=} sanitize\n * @return {?}\n */\nfunction buildMapFromSet(source, sanitize) {\n    /** @type {?} */\n    var list = [];\n    if (getType(source) === 'set') {\n        ( /** @type {?} */(source)).forEach(function (entry) { return list.push(entry); });\n    }\n    else {\n        Object.keys(source).forEach(function (key) {\n            list.push(key + \":\" + (( /** @type {?} */(source)))[key]);\n        });\n    }\n    return buildMapFromList(list, sanitize);\n}\n/**\n * Convert 'key:value' -> [key, value]\n * @param {?} it\n * @return {?}\n */\nfunction stringToKeyValue(it) {\n    var _a = it.split(':'), key = _a[0], vals = _a.slice(1);\n    return new NgStyleKeyValue(key, vals.join(':'));\n}\n/**\n * Convert [ [key,value] ] -> { key : value }\n * @param {?} map\n * @param {?} entry\n * @return {?}\n */\nfunction keyValuesToMap(map, entry) {\n    if (!!entry.key) {\n        map[entry.key] = entry.value;\n    }\n    return map;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar StyleDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(StyleDirective, _super);\n    function StyleDirective(elementRef, styler, marshal, keyValueDiffers, renderer, sanitizer, ngStyleInstance, serverLoaded, platformId) {\n        var _this = _super.call(this, elementRef, /** @type {?} */ ((null)), styler, marshal) || this;\n        _this.elementRef = elementRef;\n        _this.styler = styler;\n        _this.marshal = marshal;\n        _this.keyValueDiffers = keyValueDiffers;\n        _this.renderer = renderer;\n        _this.sanitizer = sanitizer;\n        _this.ngStyleInstance = ngStyleInstance;\n        _this.DIRECTIVE_KEY = 'ngStyle';\n        if (!_this.ngStyleInstance) {\n            // Create an instance NgClass Directive instance only if `ngClass=\"\"` has NOT been\n            // defined on the same host element; since the responsive variations may be defined...\n            _this.ngStyleInstance = new NgStyle(_this.keyValueDiffers, _this.elementRef, _this.renderer);\n        }\n        _this.init();\n        /** @type {?} */\n        var styles = _this.nativeElement.getAttribute('style') || '';\n        _this.fallbackStyles = _this.buildStyleMap(styles);\n        _this.isServer = serverLoaded && isPlatformServer(platformId);\n        return _this;\n    }\n    /** Add generated styles */\n    /**\n     * Add generated styles\n     * @param {?} value\n     * @return {?}\n     */\n    StyleDirective.prototype.updateWithValue = /**\n     * Add generated styles\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var styles = this.buildStyleMap(value);\n            this.ngStyleInstance.ngStyle = __assign({}, this.fallbackStyles, styles);\n            if (this.isServer) {\n                this.applyStyleToElement(styles);\n            }\n            this.ngStyleInstance.ngDoCheck();\n        };\n    /** Remove generated styles */\n    /**\n     * Remove generated styles\n     * @return {?}\n     */\n    StyleDirective.prototype.clearStyles = /**\n     * Remove generated styles\n     * @return {?}\n     */\n        function () {\n            this.ngStyleInstance.ngStyle = this.fallbackStyles;\n            this.ngStyleInstance.ngDoCheck();\n        };\n    /**\n     * Convert raw strings to ngStyleMap; which is required by ngStyle\n     * NOTE: Raw string key-value pairs MUST be delimited by `;`\n     *       Comma-delimiters are not supported due to complexities of\n     *       possible style values such as `rgba(x,x,x,x)` and others\n     */\n    /**\n     * Convert raw strings to ngStyleMap; which is required by ngStyle\n     * NOTE: Raw string key-value pairs MUST be delimited by `;`\n     *       Comma-delimiters are not supported due to complexities of\n     *       possible style values such as `rgba(x,x,x,x)` and others\n     * @param {?} styles\n     * @return {?}\n     */\n    StyleDirective.prototype.buildStyleMap = /**\n     * Convert raw strings to ngStyleMap; which is required by ngStyle\n     * NOTE: Raw string key-value pairs MUST be delimited by `;`\n     *       Comma-delimiters are not supported due to complexities of\n     *       possible style values such as `rgba(x,x,x,x)` and others\n     * @param {?} styles\n     * @return {?}\n     */\n        function (styles) {\n            var _this = this;\n            /** @type {?} */\n            var sanitizer = function (val) {\n                return _this.sanitizer.sanitize(SecurityContext.STYLE, val) || '';\n            };\n            if (styles) {\n                switch (getType(styles)) {\n                    case 'string': return buildMapFromList$1(buildRawList(styles), sanitizer);\n                    case 'array': return buildMapFromList$1(/** @type {?} */ (styles), sanitizer);\n                    case 'set': return buildMapFromSet(styles, sanitizer);\n                    default: return buildMapFromSet(styles, sanitizer);\n                }\n            }\n            return {};\n        };\n    // ******************************************************************\n    // Lifecycle Hooks\n    // ******************************************************************\n    /** For ChangeDetectionStrategy.onPush and ngOnChanges() updates */\n    /**\n     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n     * @return {?}\n     */\n    StyleDirective.prototype.ngDoCheck = /**\n     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n     * @return {?}\n     */\n        function () {\n            this.ngStyleInstance.ngDoCheck();\n        };\n    return StyleDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar inputs$3 = [\n    'ngStyle',\n    'ngStyle.xs', 'ngStyle.sm', 'ngStyle.md', 'ngStyle.lg', 'ngStyle.xl',\n    'ngStyle.lt-sm', 'ngStyle.lt-md', 'ngStyle.lt-lg', 'ngStyle.lt-xl',\n    'ngStyle.gt-xs', 'ngStyle.gt-sm', 'ngStyle.gt-md', 'ngStyle.gt-lg'\n];\n/** @type {?} */\nvar selector$3 = \"\\n  [ngStyle],\\n  [ngStyle.xs], [ngStyle.sm], [ngStyle.md], [ngStyle.lg], [ngStyle.xl],\\n  [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],\\n  [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]\\n\";\n/**\n * Directive to add responsive support for ngStyle.\n *\n */\nvar DefaultStyleDirective = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(DefaultStyleDirective, _super);\n    function DefaultStyleDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$3;\n        return _this;\n    }\n    return DefaultStyleDirective;\n}(StyleDirective));\n/**\n * Build a styles map from a list of styles, while sanitizing bad values first\n * @param {?} styles\n * @param {?=} sanitize\n * @return {?}\n */\nfunction buildMapFromList$1(styles, sanitize) {\n    /** @type {?} */\n    var sanitizeValue = function (it) {\n        if (sanitize) {\n            it.value = sanitize(it.value);\n        }\n        return it;\n    };\n    return styles\n        .map(stringToKeyValue)\n        .filter(function (entry) { return !!entry; })\n        .map(sanitizeValue)\n        .reduce(keyValuesToMap, /** @type {?} */ ({}));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar ALL_DIRECTIVES = [\n    DefaultShowHideDirective,\n    DefaultClassDirective,\n    DefaultStyleDirective,\n    DefaultImgSrcDirective\n];\n/**\n * *****************************************************************\n * Define module for the Extended API\n * *****************************************************************\n */\nvar ExtendedModule = /** @class */ /*@__PURE__*/ (function () {\n    function ExtendedModule() {\n    }\n    return ExtendedModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { ExtendedModule, ClassDirective, DefaultClassDirective, ImgSrcStyleBuilder, ImgSrcDirective, DefaultImgSrcDirective, ShowHideStyleBuilder, ShowHideDirective, DefaultShowHideDirective, StyleDirective, DefaultStyleDirective };\n//# sourceMappingURL=extended.es5.js.map\n",null]}