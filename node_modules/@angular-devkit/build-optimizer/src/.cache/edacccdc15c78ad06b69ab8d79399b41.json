{"remainingRequest":"C:\\Users\\bonala\\Desktop\\WeatherAppApi\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\bonala\\Desktop\\WeatherAppApi\\node_modules\\@angular\\fire\\storage\\ref.js","dependencies":[{"path":"C:\\Users\\bonala\\Desktop\\WeatherAppApi\\node_modules\\@angular\\fire\\storage\\ref.js","mtime":1552283032055},{"path":"C:\\Users\\bonala\\Desktop\\WeatherAppApi\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552283083157},{"path":"C:\\Users\\bonala\\Desktop\\WeatherAppApi\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1552283077916}],"contextDependencies":[],"result":["import { createUploadTask } from './task';\nimport { from } from 'rxjs';\nexport function createStorageRef(ref, scheduler) {\n    return {\n        getDownloadURL: function () { return scheduler.keepUnstableUntilFirst(scheduler.runOutsideAngular(from(scheduler.zone.runOutsideAngular(function () { return ref.getDownloadURL(); })))); },\n        getMetadata: function () { return scheduler.keepUnstableUntilFirst(scheduler.runOutsideAngular(from(scheduler.zone.runOutsideAngular(function () { return ref.getMetadata(); })))); },\n        delete: function () { return from(ref.delete()); },\n        child: function (path) { return createStorageRef(ref.child(path), scheduler); },\n        updateMetatdata: function (meta) { return from(ref.updateMetadata(meta)); },\n        put: function (data, metadata) {\n            var task = ref.put(data, metadata);\n            return createUploadTask(task);\n        },\n        putString: function (data, format, metadata) {\n            var task = ref.putString(data, format, metadata);\n            return createUploadTask(task);\n        }\n    };\n}\n//# sourceMappingURL=ref.js.map",null]}